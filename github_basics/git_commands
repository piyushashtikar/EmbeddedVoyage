1.)
    git init
    git add ProjectFolderName    (-A for all)
    git commit -m "first commit"
    git remote add origin https://github.com/YourGithubUsername/RepositoryName.git
    git push -u origin master

2.)
If you get error like
///////////////////////////////////////////////////////////////////////////////////////////
To https://github.com/bmit-pune/uboot-bmit-pdd-ver2.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'https://github.com/bmit-pune/uboot-bmit-pdd-ver2.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
///////////////////////////////////////////////////////////////////////////////////////////

git pull origin master
ctrl + x
git push -u origin master

3.)
Delete commits from a branch in Git



Careful: git reset --hard WILL DELETE YOUR WORKING DIRECTORY CHANGES. Be sure to stash any local changes you want to keep before running this command.

Assuming you are sitting on that commit, then this command will wack it...

git reset --hard HEAD~1

The HEAD~1 means the commit before head.

Or, you could look at the output of git log, find the commit id of the commit you want to back up to, and then do this:

git reset --hard <sha1-commit-id>

If you already pushed it, you will need to do a force push to get rid of it...

git push origin HEAD --force

However, if others may have pulled it, then you would be better off starting a new branch. Because when they pull, it will just merge it into their work, and you will get it pushed back up again.

If you already pushed, it may be better to use git revert, to create a "mirror image" commit that will undo the changes. However, both commits will be in the log.

FYI -- git reset --hard HEAD is great if you want to get rid of WORK IN PROGRESS. It will reset you back to the most recent commit, and erase all the changes in your working tree and index.

Lastly, if you need to find a commit that you "deleted", it is typically present in git reflog unless you have garbage collected your repository.

